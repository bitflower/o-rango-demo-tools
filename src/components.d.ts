/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}


declare global {

  namespace StencilComponents {
    interface ODemoBarButtons {

    }
  }

  interface HTMLODemoBarButtonsElement extends StencilComponents.ODemoBarButtons, HTMLStencilElement {}

  var HTMLODemoBarButtonsElement: {
    prototype: HTMLODemoBarButtonsElement;
    new (): HTMLODemoBarButtonsElement;
  };
  interface HTMLElementTagNameMap {
    'o-demo-bar-buttons': HTMLODemoBarButtonsElement;
  }
  interface ElementTagNameMap {
    'o-demo-bar-buttons': HTMLODemoBarButtonsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'o-demo-bar-buttons': JSXElements.ODemoBarButtonsAttributes;
    }
  }
  namespace JSXElements {
    export interface ODemoBarButtonsAttributes extends HTMLAttributes {
      'onToolbarButtonClicked'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ODemoBarSelect {
      'options': any;
    }
  }

  interface HTMLODemoBarSelectElement extends StencilComponents.ODemoBarSelect, HTMLStencilElement {}

  var HTMLODemoBarSelectElement: {
    prototype: HTMLODemoBarSelectElement;
    new (): HTMLODemoBarSelectElement;
  };
  interface HTMLElementTagNameMap {
    'o-demo-bar-select': HTMLODemoBarSelectElement;
  }
  interface ElementTagNameMap {
    'o-demo-bar-select': HTMLODemoBarSelectElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'o-demo-bar-select': JSXElements.ODemoBarSelectAttributes;
    }
  }
  namespace JSXElements {
    export interface ODemoBarSelectAttributes extends HTMLAttributes {
      'onSelectedCaseChanged'?: (event: CustomEvent) => void;
      'options'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ODemoBarToolbar {
      'name': string;
      'options': any;
    }
  }

  interface HTMLODemoBarToolbarElement extends StencilComponents.ODemoBarToolbar, HTMLStencilElement {}

  var HTMLODemoBarToolbarElement: {
    prototype: HTMLODemoBarToolbarElement;
    new (): HTMLODemoBarToolbarElement;
  };
  interface HTMLElementTagNameMap {
    'o-demo-bar-toolbar': HTMLODemoBarToolbarElement;
  }
  interface ElementTagNameMap {
    'o-demo-bar-toolbar': HTMLODemoBarToolbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'o-demo-bar-toolbar': JSXElements.ODemoBarToolbarAttributes;
    }
  }
  namespace JSXElements {
    export interface ODemoBarToolbarAttributes extends HTMLAttributes {
      'name'?: string;
      'options'?: any;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ODemoBar {
      'caseOptionSelected': number;
      'device': string;
      'deviceEmulate': boolean;
      'deviceSize': string;
      'events': string[];
      'name': string;
      'pattern': boolean;
    }
  }

  interface HTMLODemoBarElement extends StencilComponents.ODemoBar, HTMLStencilElement {}

  var HTMLODemoBarElement: {
    prototype: HTMLODemoBarElement;
    new (): HTMLODemoBarElement;
  };
  interface HTMLElementTagNameMap {
    'o-demo-bar': HTMLODemoBarElement;
  }
  interface ElementTagNameMap {
    'o-demo-bar': HTMLODemoBarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'o-demo-bar': JSXElements.ODemoBarAttributes;
    }
  }
  namespace JSXElements {
    export interface ODemoBarAttributes extends HTMLAttributes {
      'caseOptionSelected'?: number;
      'device'?: string;
      'deviceEmulate'?: boolean;
      'deviceSize'?: string;
      'events'?: string[];
      'name'?: string;
      'pattern'?: boolean;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ODemoCase {
      'name': string;
    }
  }

  interface HTMLODemoCaseElement extends StencilComponents.ODemoCase, HTMLStencilElement {}

  var HTMLODemoCaseElement: {
    prototype: HTMLODemoCaseElement;
    new (): HTMLODemoCaseElement;
  };
  interface HTMLElementTagNameMap {
    'o-demo-case': HTMLODemoCaseElement;
  }
  interface ElementTagNameMap {
    'o-demo-case': HTMLODemoCaseElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'o-demo-case': JSXElements.ODemoCaseAttributes;
    }
  }
  namespace JSXElements {
    export interface ODemoCaseAttributes extends HTMLAttributes {
      'name'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ODemoDevices {
      'orientation': string;
    }
  }

  interface HTMLODemoDevicesElement extends StencilComponents.ODemoDevices, HTMLStencilElement {}

  var HTMLODemoDevicesElement: {
    prototype: HTMLODemoDevicesElement;
    new (): HTMLODemoDevicesElement;
  };
  interface HTMLElementTagNameMap {
    'o-demo-devices': HTMLODemoDevicesElement;
  }
  interface ElementTagNameMap {
    'o-demo-devices': HTMLODemoDevicesElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'o-demo-devices': JSXElements.ODemoDevicesAttributes;
    }
  }
  namespace JSXElements {
    export interface ODemoDevicesAttributes extends HTMLAttributes {
      'orientation'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ODemoFab {

    }
  }

  interface HTMLODemoFabElement extends StencilComponents.ODemoFab, HTMLStencilElement {}

  var HTMLODemoFabElement: {
    prototype: HTMLODemoFabElement;
    new (): HTMLODemoFabElement;
  };
  interface HTMLElementTagNameMap {
    'o-demo-fab': HTMLODemoFabElement;
  }
  interface ElementTagNameMap {
    'o-demo-fab': HTMLODemoFabElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'o-demo-fab': JSXElements.ODemoFabAttributes;
    }
  }
  namespace JSXElements {
    export interface ODemoFabAttributes extends HTMLAttributes {
      'onChange-device'?: (event: CustomEvent) => void;
      'onRotate-device'?: (event: CustomEvent) => void;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ODemoResizer {
      'setActiveViewPort': (size?: string) => void;
      'size': string;
      'viewport': string;
    }
  }

  interface HTMLODemoResizerElement extends StencilComponents.ODemoResizer, HTMLStencilElement {}

  var HTMLODemoResizerElement: {
    prototype: HTMLODemoResizerElement;
    new (): HTMLODemoResizerElement;
  };
  interface HTMLElementTagNameMap {
    'o-demo-resizer': HTMLODemoResizerElement;
  }
  interface ElementTagNameMap {
    'o-demo-resizer': HTMLODemoResizerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'o-demo-resizer': JSXElements.ODemoResizerAttributes;
    }
  }
  namespace JSXElements {
    export interface ODemoResizerAttributes extends HTMLAttributes {
      'onResizeButtonClicked'?: (event: CustomEvent) => void;
      'size'?: string;
      'viewport'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface ODemoSnackbar {
      'events': any;
    }
  }

  interface HTMLODemoSnackbarElement extends StencilComponents.ODemoSnackbar, HTMLStencilElement {}

  var HTMLODemoSnackbarElement: {
    prototype: HTMLODemoSnackbarElement;
    new (): HTMLODemoSnackbarElement;
  };
  interface HTMLElementTagNameMap {
    'o-demo-snackbar': HTMLODemoSnackbarElement;
  }
  interface ElementTagNameMap {
    'o-demo-snackbar': HTMLODemoSnackbarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'o-demo-snackbar': JSXElements.ODemoSnackbarAttributes;
    }
  }
  namespace JSXElements {
    export interface ODemoSnackbarAttributes extends HTMLAttributes {
      'events'?: any;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
